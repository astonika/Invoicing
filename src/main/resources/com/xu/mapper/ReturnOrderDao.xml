<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xu.dao.ReturnOrderDao">
  <resultMap id="BaseResultMap" type="com.xu.bean.ReturnOrder">
    <id column="return_order_id" jdbcType="BIGINT" property="returnOrderId" />
    <result column="return_order_out_date" jdbcType="TIMESTAMP" property="returnOrderOutDate" />
    <result column="return_order_pay" jdbcType="VARCHAR" property="returnOrderPay" />
    <result column="suppliers_id" jdbcType="BIGINT" property="suppliersId" />
    <result column="return_order_total" jdbcType="DOUBLE" property="returnOrderTotal" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    return_order_id, return_order_out_date, return_order_pay, suppliers_id, return_order_total
  </sql>
  <select id="selectByExample" parameterType="com.xu.bean.ReturnOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from return_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from return_order
    where return_order_id = #{returnOrderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from return_order
    where return_order_id = #{returnOrderId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xu.bean.ReturnOrderExample">
    delete from return_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="return_order_id" keyProperty="returnOrderId" parameterType="com.xu.bean.ReturnOrder" useGeneratedKeys="true">
    insert into return_order (return_order_out_date, return_order_pay, 
      suppliers_id, return_order_total)
    values (#{returnOrderOutDate,jdbcType=TIMESTAMP}, #{returnOrderPay,jdbcType=VARCHAR}, 
      #{suppliersId,jdbcType=BIGINT}, #{returnOrderTotal,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" keyColumn="return_order_id" keyProperty="returnOrderId" parameterType="com.xu.bean.ReturnOrder" useGeneratedKeys="true">
    insert into return_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="returnOrderOutDate != null">
        return_order_out_date,
      </if>
      <if test="returnOrderPay != null">
        return_order_pay,
      </if>
      <if test="suppliersId != null">
        suppliers_id,
      </if>
      <if test="returnOrderTotal != null">
        return_order_total,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="returnOrderOutDate != null">
        #{returnOrderOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnOrderPay != null">
        #{returnOrderPay,jdbcType=VARCHAR},
      </if>
      <if test="suppliersId != null">
        #{suppliersId,jdbcType=BIGINT},
      </if>
      <if test="returnOrderTotal != null">
        #{returnOrderTotal,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xu.bean.ReturnOrderExample" resultType="java.lang.Long">
    select count(*) from return_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update return_order
    <set>
      <if test="record.returnOrderId != null">
        return_order_id = #{record.returnOrderId,jdbcType=BIGINT},
      </if>
      <if test="record.returnOrderOutDate != null">
        return_order_out_date = #{record.returnOrderOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.returnOrderPay != null">
        return_order_pay = #{record.returnOrderPay,jdbcType=VARCHAR},
      </if>
      <if test="record.suppliersId != null">
        suppliers_id = #{record.suppliersId,jdbcType=BIGINT},
      </if>
      <if test="record.returnOrderTotal != null">
        return_order_total = #{record.returnOrderTotal,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update return_order
    set return_order_id = #{record.returnOrderId,jdbcType=BIGINT},
      return_order_out_date = #{record.returnOrderOutDate,jdbcType=TIMESTAMP},
      return_order_pay = #{record.returnOrderPay,jdbcType=VARCHAR},
      suppliers_id = #{record.suppliersId,jdbcType=BIGINT},
      return_order_total = #{record.returnOrderTotal,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xu.bean.ReturnOrder">
    update return_order
    <set>
      <if test="returnOrderOutDate != null">
        return_order_out_date = #{returnOrderOutDate,jdbcType=TIMESTAMP},
      </if>
      <if test="returnOrderPay != null">
        return_order_pay = #{returnOrderPay,jdbcType=VARCHAR},
      </if>
      <if test="suppliersId != null">
        suppliers_id = #{suppliersId,jdbcType=BIGINT},
      </if>
      <if test="returnOrderTotal != null">
        return_order_total = #{returnOrderTotal,jdbcType=DOUBLE},
      </if>
    </set>
    where return_order_id = #{returnOrderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xu.bean.ReturnOrder">
    update return_order
    set return_order_out_date = #{returnOrderOutDate,jdbcType=TIMESTAMP},
      return_order_pay = #{returnOrderPay,jdbcType=VARCHAR},
      suppliers_id = #{suppliersId,jdbcType=BIGINT},
      return_order_total = #{returnOrderTotal,jdbcType=DOUBLE}
    where return_order_id = #{returnOrderId,jdbcType=BIGINT}
  </update>
</mapper>